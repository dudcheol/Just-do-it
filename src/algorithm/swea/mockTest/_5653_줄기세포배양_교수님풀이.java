package algorithm.swea.mockTest;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class _5653_줄기세포배양_교수님풀이 {
	static int N;
	static int M;
	static int K;
	static int[][] map;
	static boolean[][] visited;
	static Queue<Cell> q;
	static int[] dy = { -1, 1, 0, 0 }; // 상,하,좌,우 번식
	static int[] dx = { 0, 0, -1, 1 }; // 상,하,좌,우 번식
	// 이러게 내가 상태정보를 상수화해서 정의하면 헷갈리지 않고 좋다!
	private static final int INACIVE = 2;
	private static final int ACIVE = 1;
	private static final int DEATH = 0;

	static class Cell {
		int r,c; // 좌표
		int X; // 생명력
		int val; // 현재값
		int status = INACIVE; // 상태변수

		public Cell(int r, int c, int X) {
			this.r = r;
			this.c = c;
			this.X = X;
			this.val = X;
		}
		
		// 세포를 진행시킴, 상태변경됨, 비활성화상태에서 K시간 후 활성화됨, 활성화상태에서 K시간 후 죽음, (활성화 상태에서는 세포 확산됨)
		public void next() {
			 val--; // 현재값 감소
			 if(val > 0) return; // 상태는 안바뀜
			 if(status == INACIVE) { // 비활성화 상태
				 status = ACIVE;
			 } else if(status == ACIVE) { // 활성화 상태
				 status = DEATH;
			 }
		}
	}

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();

		int TC = Integer.parseInt(br.readLine());

		for (int test_case = 1; test_case <= TC; test_case++) {
			// 입력처리
			StringTokenizer st = new StringTokenizer(br.readLine(), " ");
			N = Integer.parseInt(st.nextToken());
			M = Integer.parseInt(st.nextToken());
			K = Integer.parseInt(st.nextToken());

			map = new int[N+K+2][N+K+2]; // 2는 여유공간
			visited = new boolean[N+K+2][N+K+2]; // 2는 여유공간
			q = new LinkedList<Cell>();
			
			int start = K / 2 + 1; // 저장을 시작할 중간위치, 시작좌표
			
			for (int i = start; i < N + start; i++) {
				st = new StringTokenizer(br.readLine(), " ");
				for (int j = start; j < M + start; j++) {
					int X = Integer.parseInt(st.nextToken()); // 줄기세포 생명력, 1~10
					if (X != 0) {
						map[i][j] = X;
						visited[i][j] = true;
						q.offer(new Cell(i, j, X)); // 초기 상태에서 줄기 세포들은 비활성 상태
					}
				}
			}
			
			sb.append('#').append(test_case).append(' ').append(bfs()).append('\n');
		}

		System.out.print(sb);
	}

	/** K시간동안 BFS 탐색 후 살아있는 세포 수 리턴 */
	private static int bfs() {
		while(K-- > 0) { // K시간 지난 후에는 반복문을 더이상 돌 지 않음
			// 현재 큐의 크기만큼 큐에 들어있는 모든 셀중 인접칸에 세포 확산, 생명력이 큰 셀이 진입하도록 하기 위함
			for (Cell cell : q) { // 전체 큐 순회
				if(cell.status == ACIVE) { // 활성화 셀을 세포 확산
					for (int d = 0; d < 4; d++) {
						int nr = cell.r + dy[d];
						int nc = cell.c + dx[d];
						if(!visited[nr][nc] && map[nr][nc] < cell.X) { // 방문하지는 않았음,생명력이 더 큰 세포로 업데이트
							map[nr][nc] = cell.X;
						}
					}
				}
			}
			
			int size = q.size(); // 현재 큐의 크기
			for (int t = 0; t < size; t++) {
				Cell cell = q.poll(); // 큐에 있는 내용을 하나 꺼내
				if(cell.status == ACIVE){ // 활성화 상태인 경우 인접한 칸을
					for (int i = 0; i < 4; i++) {
						int nr = cell.r + dy[i];
						int nc = cell.c + dx[i];
						if(!visited[nr][nc]) { // 방문하지 않았으면
							q.offer(new Cell(nr,nc,map[nr][nc])); // 번식된 세포 큐에 넣기
							visited[nr][nc] = true;// 방문처리
						}
					}
				}
				cell.next(); // next 세포 한단계 성숙작업
				if(cell.status != DEATH) {
					q.offer(cell); // 비활성화, 활성화 이면 다시 큐에 넣어주기
				}
			}
		}
		return q.size(); //살아있는 세포(비활성화, 활성화)의 개수
	}
}

/*
5
2 2 10
1 1
0 2
5 5 19
3 2 0 3 0 
0 3 0 0 0 
0 0 0 0 0 
0 0 1 0 0 
0 0 0 0 2
9 10 37
0 0 0 0 0 0 0 0 3 0 
0 0 0 0 0 0 0 0 5 3 
0 0 2 0 0 0 0 4 0 0 
3 0 0 0 0 0 4 0 0 0 
0 0 0 0 0 3 5 0 0 2 
0 0 0 0 0 0 0 0 0 5 
0 0 0 0 0 0 0 0 2 3 
0 0 0 0 0 0 0 0 0 0 
0 0 2 2 0 0 0 0 0 0 
20 18 83
0 0 0 0 0 0 0 0 0 0 0 2 0 0 6 0 0 0 
0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 
0 0 0 6 0 0 0 0 0 0 0 0 0 0 2 0 3 0 
4 0 2 0 0 0 0 0 0 0 0 0 5 0 0 0 0 3 
0 0 0 0 0 5 4 4 6 0 0 0 0 0 0 0 0 0 
5 0 0 0 0 0 2 0 2 6 0 0 0 0 0 4 0 0 
4 0 0 3 0 0 0 0 0 0 0 3 0 0 0 5 0 0 
0 0 0 0 0 0 0 2 2 0 0 0 0 3 0 0 0 0 
0 0 0 0 5 0 0 0 3 0 3 0 0 4 0 0 0 0 
0 0 0 0 6 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 6 0 2 0 0 0 0 0 3 0 0 0 3 0 
0 5 2 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 
3 0 0 0 0 0 0 0 6 0 2 0 5 0 0 0 0 0 
5 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 6 0 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 4 0 0 0 0 0 0 0 0 0 0 2 0 0 0 
0 0 3 4 5 0 0 0 0 0 0 0 0 0 0 6 0 0 
2 0 0 0 0 3 0 0 0 0 0 0 0 0 0 5 0 0 
0 0 0 0 0 0 0 0 0 3 6 2 0 0 0 0 0 0 
49 43 283
0 6 0 0 0 10 0 0 0 0 0 0 9 0 0 0 0 0 0 0 0 0 0 4 0 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 
0 5 0 0 0 2 0 0 0 0 0 0 8 0 0 8 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 3 7 0 0 0 0 0 0 9 0 1 0 5 0 0 1 0 0 0 0 0 0 0 0 0 0 0 9 0 7 0 0 0 0 0 0 0 0 1 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 0 8 0 0 0 0 0 0 0 0 0 3 0 0 0 6 0 0 0 0 6 0 0 0 0 0 0 
7 0 0 0 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 0 0 0 0 8 0 0 0 0 0 0 0 0 1 0 0 
0 9 0 0 0 0 0 0 0 0 9 6 0 2 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 9 
0 0 0 0 1 0 0 0 0 0 0 3 0 0 0 0 0 0 5 0 10 0 0 0 0 0 0 0 0 0 9 4 0 0 0 0 0 0 9 0 9 0 8 
0 0 0 0 0 0 0 0 0 7 0 0 0 0 9 0 0 0 0 0 0 0 0 0 0 8 0 0 0 0 0 0 0 0 0 0 0 0 0 3 2 0 1 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 3 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 7 0 0 0 2 0 0 0 0 0 0 8 0 0 0 0 10 0 0 1 7 0 8 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 2 0 0 9 0 0 0 0 0 8 0 0 0 0 0 4 0 6 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 0 0 0 
1 0 0 0 0 0 0 6 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6 0 5 0 0 0 0 0 0 7 0 0 0 
8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 9 0 0 0 0 0 0 5 8 
0 0 0 10 0 9 0 8 0 0 0 0 0 0 2 9 0 0 0 7 2 7 0 7 0 0 0 0 2 0 4 3 0 0 0 0 0 0 0 0 0 2 0 
1 0 0 0 0 0 0 4 9 1 0 0 0 0 0 0 0 0 0 5 0 0 0 0 6 0 0 5 0 0 0 0 0 0 0 0 0 0 0 3 3 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 1 0 3 1 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 1 0 0 0 9 0 0 
0 0 0 0 0 0 0 10 0 0 0 0 0 0 9 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 0 0 1 3 0 0 
0 0 0 0 0 0 6 0 0 0 1 0 0 2 0 0 0 0 9 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 7 7 0 0 
0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 5 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 
0 0 0 0 9 0 8 0 0 0 0 0 0 4 0 0 0 10 8 0 0 0 0 0 0 10 0 0 0 5 0 0 0 0 0 0 0 1 0 0 10 4 7 
0 0 0 0 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 8 0 0 0 4 0 7 0 0 0 0 0 3 0 
0 0 0 0 5 0 3 0 0 0 0 0 0 0 8 1 0 0 7 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 9 0 1 0 0 0 0 10 7 0 0 0 0 0 2 0 0 7 0 0 0 0 0 0 0 7 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 8 2 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 8 0 0 7 0 2 0 0 0 0 
0 8 0 0 0 0 0 0 0 0 3 0 0 1 0 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 8 0 0 5 0 9 0 0 0 0 0 
0 0 0 0 0 0 0 0 3 5 0 0 1 0 4 0 0 0 0 9 0 0 0 0 0 0 0 0 0 0 5 0 0 4 0 0 0 0 10 8 0 0 0 
0 0 0 0 0 0 0 0 4 0 0 7 10 0 10 0 0 0 0 0 0 0 0 0 0 9 0 0 0 0 0 0 0 8 3 9 6 7 0 0 0 0 2 
0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 0 0 8 7 10 0 0 0 0 0 0 6 0 0 0 5 0 0 0 0 0 0 0 0 0 0 10 0 
7 0 0 0 8 0 0 0 8 9 0 0 0 0 0 0 9 0 0 0 0 0 0 0 0 6 0 0 5 0 0 0 0 0 0 0 0 0 0 3 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 6 0 6 0 0 0 0 3 0 0 5 3 0 0 0 0 1 9 0 6 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 7 2 0 0 0 0 0 0 0 0 0 0 5 0 0 0 0 8 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 6 
0 9 0 0 0 0 0 0 0 0 0 3 0 9 2 0 0 0 4 0 2 9 2 0 6 0 0 0 0 0 0 0 0 0 0 0 0 0 8 0 0 0 0 
0 0 0 3 0 1 0 0 8 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 7 0 6 0 0 0 0 0 7 0 0 0 0 4 7 10 
1 0 0 0 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 0 8 0 0 0 0 0 0 0 0 3 9 2 
5 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 6 0 0 0 0 0 0 0 0 9 0 8 0 0 0 0 0 0 0 3 0 0 0 0 0 
0 0 0 0 7 0 10 0 0 0 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 8 2 3 0 0 
0 0 0 0 0 5 0 0 6 0 0 3 0 0 0 0 0 8 0 0 6 0 0 0 8 0 0 5 0 0 0 0 8 0 0 0 0 0 0 0 5 0 1 
7 0 9 0 7 0 0 9 0 0 0 0 4 0 0 0 0 0 0 8 1 0 4 0 0 0 0 0 0 0 0 0 4 7 0 0 8 0 0 0 0 0 0 
0 0 0 1 0 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 2 3 1 0 0 4 0 3 10 0 0 0 5 
0 0 4 0 0 0 0 0 0 4 4 0 0 0 8 0 4 0 2 0 8 0 0 0 0 0 0 0 9 0 0 0 0 5 0 0 0 0 0 0 0 0 0 
0 0 8 0 7 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 6 0 0 0 0 1 0 0 0 0 4 3 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 10 3 0 0 0 0 0 3 0 
0 0 2 0 0 0 0 0 8 5 0 0 0 0 0 0 0 0 0 0 0 0 4 8 0 0 0 0 0 1 0 5 0 0 0 0 2 3 9 0 0 0 0 
0 5 8 9 0 0 0 0 0 4 0 0 0 10 0 0 0 1 0 0 0 0 0 10 0 7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
6 0 0 0 0 0 10 0 5 0 0 0 0 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 9 0 0 0 0 0 0 2 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 2 4 0 
0 3 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 0 
0 0 0 9 0 0 0 0 4 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 9 0 0 0 0 0 0 0 0 0 0 0 5 0 0 0 9 2 0 
0 0 0 0 0 2 0 0 0 0 0 0 10 0 0 0 0 0 2 0 0 0 8 0 0 0 0 0 0 10 0 0 0 0 0 0 7 0 0 0 0 0 0 
 */

/*
 * 정답
#1 22
#2 36
#3 90
#4 164
#5 712*/
